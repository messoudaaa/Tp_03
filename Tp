#include <stdio.h>
#include <string.h>
#include <stdlib.h>
typedef struct element {
    int val;
    struct element* suivant;
} element;

// إنشاء liste vide
element* creerListe() 
 {
    element* l = NULL;
    return l;
}
//chargerliste 
element* chargerListe(int tab[], int n) {
    element *liste = NULL;
    element *nouveau;

    for (int i = 0; i < n; i++) {
        nouveau = (element*)malloc(sizeof(element));
        if (nouveau == NULL) {
            // معالجة حالة فشل تخصيص الذاكرة (مثلاً: إرجاع NULL أو إنهاء البرنامج)
            return NULL;
        }
        nouveau->val = tab[i];
        nouveau->suivant = liste;
        liste = nouveau; // تحديث مؤشر القائمة
    }

    return liste;
}

    //afficher_liste 
  
  
  void  afficherListe(element* l) {
  
  
    if (l != NULL) {
        while (l != NULL) {
            printf("%d ", l->val);  
            l = l->suivant;
        }
    } else {
        printf("la liste est vide\n");
    }
}

// اجراء لحذفالعنصر الأخير من 
 
 element* supprimerEnFin(element* l) {
    if (l == NULL) {
        printf("La liste est vide\n");
        return l; 
    }

    if (l->suivant == NULL) { // حالة عنصر واحد
        free(l);
        return NULL;
    }

    element* temp = l;
    while (temp->suivant->suivant != NULL)
     { 
        temp = temp->suivant;
    }

    free(temp->suivant); // حذف العنصر الأخير
    temp->suivant = NULL; 

    return l; 
}

  //إضافة عنصر في بداية liste
element* ajouterEnDebut(element *liste, int valeur) {
    element *nouveau = (element*)malloc(sizeof(element));
    if (nouveau == NULL) 
       nouveau->val = valeur;
      nouveau->suivant = liste;
  return nouveau;
}
// اجراء  افراغ القائمة
void viderListe(element** l) {
    element* temp;
    while (*l != NULL) {
        temp = *l;
        *l = (*l)->suivant;   
        free(temp); 
    }
    printf("La liste a été vidée.\n");
}
 int main()
 { 

  int Tab[10]={1,3,5,7,8,10,9,11,13,20};

  element*liste=creerListe();

  element*L=chargerListe(Tab,10);

  afficherListe(L);

  element* L1=supprimerEnFin(L);

  afficherListe(L1);

  element* L2=ajouterEnDebut(L1,40);

  afficherListe(L2);

  viderListe(L2);

  return 0;
 }
